// "use client";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import Navbar from "@/components/navbar/Navbar";
// import Drawer from "@/components/drawer/Drawer";
// import { Provider } from "react-redux";
// import { usePathname } from "next/navigation";
// const inter = Inter({ subsets: ["latin"] });
// import { store } from "../store";
// import { Toaster } from "@/components/ui/toaster"
// import AuthProviders from "@/utils/authProvider";
// // export const metadata = {
// //   title: "Create Next App",
// //   description: "Generated by create next app",
// // };

// export default function RootLayout({ children }) {
//   const pathname = usePathname();
//   const shouldRenderDrawer = pathname !== "/";
//   return (
//     <html lang="en">
//       <body>
//         <Provider store={store}>
//           <AuthProviders>
//             <Navbar />
//             <main className="flex flex-row inter">
//               {shouldRenderDrawer && (
//                 <div className="w-[380px]">
//                   <Drawer />
//                 </div>
//               )}
//               <div className="w-full p-14 mt-[75px]">
//                 {children}
//               </div>
//             </main>
//             <Toaster />
//           </AuthProviders>
//         </Provider>
//       </body>
//     </html>
//   );
// }

"use client";
import { Inter } from "next/font/google";
import "./globals.css";
import Navbar from "@/components/navbar/Navbar";
import Drawer from "@/components/drawer/Drawer";
import { Provider } from "react-redux";
import { usePathname } from "next/navigation";
import { useState, useEffect } from "react";
const inter = Inter({ subsets: ["latin"] });
import { store } from "../store";
import { Toaster } from "@/components/ui/toaster";
import AuthProviders from "@/utils/authProvider";

export default function RootLayout({ children }) {
  const pathname = usePathname();
  const shouldRenderDrawer = pathname !== "/";
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // Check if screen is mobile
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768); // md breakpoint
      // Auto-close drawer on mobile when screen resizes
      if (window.innerWidth >= 768) {
        setIsDrawerOpen(true); // Always open on desktop
      } else {
        setIsDrawerOpen(false); // Closed by default on mobile
      }
    };

    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);
    return () => window.removeEventListener("resize", checkScreenSize);
  }, []);

  const toggleDrawer = () => {
    setIsDrawerOpen(!isDrawerOpen);
  };

  return (
    <html lang="en">
      <body>
        <Provider store={store}>
          <AuthProviders>
            <Navbar
              onToggleDrawer={toggleDrawer}
              showToggle={shouldRenderDrawer && isMobile}
            />
            <main className="flex flex-row inter">
              {shouldRenderDrawer && (
                <>
                  {/* Desktop drawer container */}
                  <div className="hidden md:block md:w-[380px]">
                    <Drawer isOpen={true} isMobile={false} />
                  </div>

                  {/* Mobile drawer */}
                  <div className="md:hidden">
                    <Drawer
                      isOpen={isDrawerOpen}
                      isMobile={true}
                      onClose={() => setIsDrawerOpen(false)}
                    />
                  </div>

                  {/* Mobile overlay */}
                  {isMobile && isDrawerOpen && (
                    <div
                      className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
                      onClick={() => setIsDrawerOpen(false)}
                    />
                  )}
                </>
              )}
              <div
                className={`w-full p-4 md:p-14 mt-[75px] ${
                  shouldRenderDrawer && !isMobile ? "md:ml-0" : ""
                }`}
              >
                {children}
              </div>
            </main>
            <Toaster />
          </AuthProviders>
        </Provider>
      </body>
    </html>
  );
}
